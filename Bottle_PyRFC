import bottle
from bottle import route, get, post, request, run, redirect
from pyrfc import Connection, ABAPApplicationError, LogonError
import pathlib
from pathlib import Path

bottle.app().catchall = False 

#login 
@get('/')
def login_form():
    return '''<DIV ALIGN='CENTER'><BR><BR><BR><BR>
                <H1>Python (Bottle) & SAP - using PyRFC</H1>
                <BR><TABLE BORDER='1' BORDERCOLOR='BLUE'
                     BGCOLOR='WHITE'>
                <FORM METHOD='POST'>
                <TR><TD>User</TD><TD>
                <INPUT TYPE='TEXT' NAME='User'></TD></TR>
                <TR><TD>Password</TD>
                <TD><INPUT TYPE='PASSWORD' NAME='Passwd'></TD></TR>
                <TR><TD>Ashost</TD>
                <TD><INPUT TYPE='TEXT' NAME='Ashost'></TD></TR>
                <TR><TD COLSPAN='2' ALIGN='CENTER'>
                <INPUT TYPE='SUBMIT' value='Log In' NAME='LOG_IN'>
                <INPUT TYPE='RESET' value='Clear'></TD></TR>
                </FORM>
                <TABLE>
              </DIV>'''
 
#login    
@post('/')
def login_submit():
    global conn

    try:
        user = request.forms.get('User')
        passwd = request.forms.get('Passwd')
        ashost = request.forms.get('Ashost')
        
        abap_system = {
            'user'      : user,
            'passwd'    : passwd,
            'ashost'    : ashost,
            'sysnr'     : '00',
            'client'    : '500',
            'lang'      : 'EN'
        }
        
        conn = Connection(**abap_system)
        conn.alive
        True    
        redirect("/choose")
    except LogonError:
        redirect("/error")

        
@get('/choose')
def choose_table():
    return '''<CENTER>
                <FORM METHOD='POST'>
                <INPUT TYPE='TEXT' NAME='Table'><BR>
                <INPUT TYPE='SUBMIT' value='Show Table'
                 NAME='Show_Table'>
                </FORM>
              </CENTER>'''



@get('/error')
def error():
    output = "<div align='center'><h1>Invalid username or password</h1></div>"
    return output
 
    
@post('/choose')
def show_table():
    fields = []
    fields_name = []
    counter = 0
    table = request.forms.get('Table')
    try:

        tables = conn.call("RFC_READ_TABLE", QUERY_TABLE=table, DELIMITER='|')
        data_fields = tables["DATA"]
        data_names = tables["FIELDS"]
        long_fields = len(data_fields)
        long_names = len(data_names)

        
        txt = open("filetable.txt", "w+")
 
        for line in range(0, long_fields):
            fields.append(data_fields[line]["WA"].strip())
            txt.write(data_fields[line]["WA"].strip())
        for line in range(0, long_names):
            fields_name.append(data_names[line]["FIELDNAME"].strip())
            txt.write(data_names[line]["FIELDNAME"].strip())
    
        download_table='''<a href="C:\Windows\System32\filetable.txt" download="filetable.txt"><button>Download</button></a>'''
        
        txt.close()
        
        output = "<div align='center'><h1>%s</h1></center>" % table
 
        output += "<table border='1'><tr>"
        for line in range(0, long_names):
            field_name = fields_name[line]
            output += "<th bgcolor='#B8D5F5'> %s </th>" % field_name
        output += "</tr>"
        for line in range(0, long_fields):
            counter += 1
            if(counter % 2 == 0):
                output += "<tr bgcolor='#DCE1E5'>"
            else:
                output += "<tr>"
            data_split = fields[line].split("|")
            for line in range(0, long_names):
                output += "<td> %s </td>" % data_split[line]
            output += "</tr>"
        output += "</table>"    
            
    except ABAPApplicationError:
        output = "<div align='center'><h1>Table %s was not found</h1></div>" % table
        return output
    
    return download_table,output 
    conn.close()

run(host='localhost', port=8080, debug=True)
